@page "/fetchdata"
@using ModellClientLib.Context;
@using ModellClientLib.Controllers;
@using ModellClientLib.Models;
@using System.Linq;
@using ModellClientLib.Mqtt;

<PageTitle>Switches</PageTitle>

<h1>Switches</h1>

<p>All switches</p>

<table class="table table-striped">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Topic</th>
            <th>State</th>
            <th>PinNumber</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var sw in switches)
        {
            <tr>
                <td>@sw.iD</td>
                <td>@sw.name</td>
                <td>@sw.topic</td>
                <td>@sw.state</td>
                <td>@sw.pinNumber</td>
                <td>
                    <div class="btn-group" role="group">
                        <button class="btn btn-danger" @onclick="@(() => Delete(sw.iD))">Delete</button>
                        <button class="btn btn-primary" @onclick="@(() => StateChange(sw.iD))">Switch State</button>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    IEnumerable<Switch> switches = new List<Switch>();
    ModellDBContext context = new ModellDBContext();

    protected override void OnInitialized()
    {
        switches = context.switches.ToList();
        MqttClientSingleton.Instance.Connect();
    }

    void Delete(int id)
    {
        SwitchController.Delete(id);
        switches = context.switches.ToList();
    }

    async void StateChange(int id)
    {
        var sw = SwitchController.GetByID(id);
        sw.state = !sw.state;
        await SwitchController.UpdateSWAsync(sw).ConfigureAwait(false);
        switches = context.switches.ToList();
    }
}
