@page "/AddServo"
@using ModellClientLib.Context;
@using ModellClientLib.Controllers;
@using ModellClientLib.Models;
@using Microsoft.AspNetCore.Components.Forms
@using ModellClientLib.Mqtt;

<PageTitle>Add Servo</PageTitle>

<div class="container mt-4">
    <h1>Add Servo</h1>

    @if (!processing)
    {
        <EditForm Model="@sw" OnValidSubmit="Add" class="mt-4">
            <div class="form-group">
                <label for="topic">Topic:</label>
                <InputText id="topic" @bind-Value="@sw.topic" class="form-control" />
            </div>

            <div class="form-group">
                <label for="name">Name:</label>
                <InputText id="name" @bind-Value="@sw.name" class="form-control" />
                <ValidationMessage For="@(() => sw.name)" />
            </div>

            <div class="form-group">
                <label for="pwmPinId">PWM Pin ID:</label>
                <InputNumber id="pwmPinId" @bind-Value="@sw.pwmPinId" class="form-control" />
            </div>

            <div class="form-group">
                <label for="MinDegree">Min Degree:</label>
                <InputNumber id="MinDegree" @bind-Value="@sw.MinDegree" class="form-control" />
            </div>

            <div class="form-group">
                <label for="MaxDegree">Max Degree:</label>
                <InputNumber id="MaxDegree" @bind-Value="@sw.MaxDegree" class="form-control" />
            </div>

            <div class="form-group">
                <label for="MaxDegree">Set Degree:</label>
                <InputNumber id="MaxDegree" @bind-Value="@degrees" class="form-control" />
            </div>

            <button type="submit" class="btn btn-primary">Add Servo</button>
        </EditForm>
        <button class="btn btn-primary" @onclick="@(() => TestServo())">Test Servo</button>

    }
    else
    {
        <div class="mt-4">
            <p><em>Processing...</em></p>
        </div>
    }
</div>

@code {
    ModellDBContext context = new ModellDBContext();
    Servo sw = new Servo();
    int degrees = 0;
    bool processing = false;
    protected override void OnInitialized()
    {

        MqttClientSingleton.Instance.Connect();
    }

    async void TestServo()
    {
        sw.degree = degrees;
        await ServoController.TestServoAsync(sw).ConfigureAwait(false);
    }

    void Add()
    {
        processing = true;
        sw.degree = degrees;
        ServoController.AddServ(sw);
        processing = false;
        sw = new Servo();
    }
}
