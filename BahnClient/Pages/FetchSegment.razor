@page "/FetchSegment"
@using ModellClientLib.Context;
@using ModellClientLib.Controllers;
@using ModellClientLib.Models
@inject NavigationManager Navigation

<PageTitle>Segment List</PageTitle>

<div class="container mt-4">
    <h1>Segment List</h1>

    <table class="table table-striped mt-4">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Is Activated</th>
                <th>Servos Count</th>
                <th>Switches Count</th>
                <th>Edit</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var segment in segments)
            {
                <tr>
                    <td>@segment.iD</td>
                    <td>@segment.SegmentName</td>
                    <td>@segment.isActivated</td>
                    <td>@segment.servos.Count</td>
                    <td>@segment.switchs.Count</td>
                    <td>
                        <button @onclick="@(() => asyncActivateSegment(segment.iD))" class="btn btn-primary">Activate</button>
                    </td>
                    <td>
                        <button class="btn btn-danger" @onclick="@(() => DeleteSegment(segment.iD))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    ModellDBContext context = new ModellDBContext();
    IEnumerable<Segment> segments;

    protected override void OnInitialized()
    {
        // Load segments from the database or another data source
        segments = SegmentController.GetSegments();
    }
    async void asyncActivateSegment(int id)
    {
        await SegmentController.activateSegmentAsync(id);
    }
    void DeleteSegment(int segmentId)
    {
        SegmentController.RemoveSegment(SegmentController.GetSegment(segmentId));
    }
}
