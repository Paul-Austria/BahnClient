@page "/AddSegment"
@using ModellClientLib.Context;
@using ModellClientLib.Controllers;
@using ModellClientLib.Models;
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager Navigation

<PageTitle>Add Segment</PageTitle>

<div class="container mt-4">
    <h1>Add Segment</h1>

    @if (!processing)
    {
        <EditForm Model="@segment" class="mt-4">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label for="SegmentName">Segment Name:</label>
                <InputText @bind-Value="segment.SegmentName" class="form-control" />
                <ValidationMessage For="@(() => segment.SegmentName)" />
            </div>
            <div class="form-group">
                <label for="SegmentName">Segment Group:</label>
                <InputText @bind-Value="segment.SegmentGroup" class="form-control" />
                <ValidationMessage For="@(() => segment.SegmentGroup)" />
            </div>

            <div class="form-group form-check">
                <InputCheckbox @bind-Value="segment.isActivated" class="form-check-input" id="isActivated" />
                <label class="form-check-label" for="isActivated">Is Activated</label>
            </div>

            <fieldset class="border p-2 mb-4">
                <legend>Select Servo</legend>
                <div class="form-group">
                    <label for="selectedServo">Servo:</label>
                    <select @bind="selectedServo" class="form-control">
                        <option value="">--Select Servo--</option>
                        @foreach (var servo in servos)
                        {
                            <option value="@servo.iD">@servo.name</option>
                        }
                    </select>
                </div>

                <div class="form-group">
                    <label for="servoPos">Servo Position:</label>
                    <select @bind="selectedServoPosition" class="form-control">
                        <option value="">--Select Position--</option>
                        <option value="Min">Minimum</option>
                        <option value="Max">Maximum</option>
                    </select>
                </div>

                <button @onclick="AddServoToList" class="btn btn-primary">Add Servo</button>
            </fieldset>

            <fieldset class="border p-2 mb-4">
                <legend>Select Switch</legend>
                <div class="form-group">
                    <label for="selectedSwitch">Switch:</label>
                    <select @bind="selectedSwitch" class="form-control">
                        <option value="">--Select Switch--</option>
                        @foreach (var sw in switches)
                        {
                            <option value="@sw.iD">@sw.name</option>
                        }
                    </select>
                </div>

                <div class="form-group form-check">
                    <InputCheckbox @bind-Value="reqSwitchState" class="form-check-input" id="reqSwitchState" />
                    <label class="form-check-label" for="reqSwitchState">Required Switch State</label>
                </div>

                <button @onclick="AddSwitchToList" class="btn btn-primary">Add Switch</button>
            </fieldset>

            <div class="mb-4">
                <h4>Selected Servo Positions:</h4>
                <ul>
                    @foreach (var servoState in segment.servos)
                    {
                        var servoName = GetServoName(servoState); // Assuming there's a method to get servo name
                        <li>@(servoState.ServoPos == ServoState.MinMax.Min ? "Minimum" : "Maximum") - Segment: @segment.SegmentName, Servo: @servoName</li>
                    }
                </ul>

                <h4>Selected Switches:</h4>
                <ul>
                    @foreach (var switchState in segment.switchs)
                    {
                        var switchName = GetSwitchName(switchState); // Assuming there's a method to get switch name
                        <li>Required State: @switchState.reqSwichState - Segment: @segment.SegmentName, Switch: @switchName</li>
                    }
                </ul>
            </div>

            <button @onclick="Add" class="btn btn-primary">Add Segment</button>
        </EditForm>
    }
    else
    {
        <div class="mt-4">
            <p><em>Processing...</em></p>
            <!-- You can also add a loading spinner here if you have one -->
        </div>
    }
</div>

@code {
    ModellDBContext context = new ModellDBContext();
    Segment segment = new Segment();
    List<Servo> servos;
    List<Switch> switches;
    int? selectedServo = null;
    string selectedServoPosition = "";
    int? selectedSwitch = null;
    bool reqSwitchState = false;
    bool processing = false;

    protected override void OnInitialized()
    {
        servos = ServoController.GetServos().ToList();
        switches = SwitchController.GetSwitches().ToList();
    }

    void Add()
    {
        processing = true;
        SegmentController.AddSegment(segment);
        segment = new Segment();
        processing = false;
    }

    string GetServoName(ServoState state)
    {
        var servo = servos.FirstOrDefault(s => s.iD == state.ServoID);
        return servo != null ? servo.name : "";
    }
    string GetSwitchName(SwitchState state)
    {
        var sw = switches.FirstOrDefault(s => s.iD == state.SwitchID);
        return sw != null ? sw.name : "";
    }
    void AddServoToList()
    {
        if (selectedServo.HasValue && !string.IsNullOrWhiteSpace(selectedServoPosition))
        {
            var servoState = new ServoState
                {
                    ServoID = selectedServo.Value,
                    ServoPos = selectedServoPosition.ToLower() == "min" ? ServoState.MinMax.Min : ServoState.MinMax.Max
                };

            segment.servos.Add(servoState);
        }
    }

    void AddSwitchToList()
    {
        if (selectedSwitch.HasValue)
        {
            var switchState = new SwitchState
                {
                    SwitchID = selectedSwitch.Value,
                    reqSwichState = reqSwitchState
                };

            segment.switchs.Add(switchState);
        }
    }
}
