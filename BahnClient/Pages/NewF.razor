@page "/testing"

<style>
    .canvas-container {
        position: relative;
    }

    .canvas {
        position: relative;
        width: 500px;
        height: 500px;
        border: 1px solid #000;
    }

    .shape {
        position: absolute;
        width: 50px;
        height: 50px;
        background-color: lightblue;
        border: 1px solid #000;
    }
</style>

<h3>Drag and Drop Canvas</h3>

<div class="canvas-container">
    <div class="canvas" @onmousedown="StartDrag" @onmousemove="Drag" @onmouseup="StopDrag">
        @foreach (var shape in shapes)
        {
            <div class="shape" style="@($"left: {shape.Left}px; top: {shape.Top}px;")"></div>
        }
    </div>
</div>

<button @onclick="AddShape">Add Shape</button>

@code {
    List<Shape> shapes = new List<Shape>();

    int startX;
    int startY;
    bool isDragging = false;

    void StartDrag(MouseEventArgs e)
    {
        isDragging = true;
        startX = (int)e.ClientX;
        startY = (int)e.ClientY;
    }

    void Drag(MouseEventArgs e)
    {
        if (isDragging)
        {
            foreach (var shape in shapes)
            {
                shape.Left += (int)e.ClientX - startX;
                shape.Top += (int)e.ClientY - startY;
            }

            startX = (int)e.ClientX;
            startY = (int)e.ClientY;
            StateHasChanged();
        }
    }

    void StopDrag()
    {
        isDragging = false;
    }

    void AddShape()
    {
        shapes.Add(new Shape { Left = 0, Top = 0 });
    }

    public class Shape
    {
        public int Left { get; set; }
        public int Top { get; set; }
    }
}
